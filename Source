// INCLUDET
#define DisplaySerial Serial // Using Hardware Serial
#include "Picaso_Serial_4DLib\Picaso_Const4D.h"
#include "Picaso_Serial_4DLib\Picaso_Serial_4DLib.h"
#include <math.h>
Picaso_Serial_4DLib Display(&DisplaySerial);

// ALKUMÄÄRITYKSET
char * paiva;
/// Valikkojen määritykset
int menu = 1;
int select = 1;
/// Ajan muuttujat
int timer1_counter;
unsigned int day = 6;
unsigned int hour = 23;
unsigned int minute = 59;
unsigned int second = 0;
/// Hälytyksen muuttujat
int alarm_hour = 0;
int alarm_minute = 0;
bool alarm = false;
/// Muita muuttujia
int canpress = 2;
int update_inverval = 0;
long cnt = 0;
long lastCnt = 0;
bool draw = true;
/// Piirtämiseen liittyviä
int colourvalue; // HEXANA
char tempstring[256] = { 0 }; // Temporary String Variable for putstr
bool redraw_menu = true;
int cX = 162;
int cY = 160;
const float DegreesToRadians = 0.0174533;
int i;
int preSeconds, preMinutes, preHours;
float preSecondsX = 0, preSecondsY = 100, preMinutesX = 0, preMinutesY = 100, preHoursX = 0, preHoursY = 100;
int menu_id = 1, currentMenu = 1;
bool alarm_hour_pressed = false;

/*
int mainButton_x1 = 1, mainButton_x2 = 62;
int alarmButton_x1 = 65, alarmButton_x2 = 126;
int timeButton_x1 = 129, timeButton_x2 = 190;
int ledButton_x1 = 193, ledButton_x2 = 254;
int audioButton_x1 = 257, audioButton_x2 = 318;
*/

int button_y1 = 1, button_y2 = 24;

int buttonCoord[6][2] = {
	{ 1, 62 } ,
	{ 65, 126 } ,
	{ 129, 190 } ,
	{ 193, 254 } ,
	{ 257, 318 }
};

int touch_X, touch_Y, old_touch_Y;

// TULOSTAMINEN &
// PIIRTOFUNKTIOT

/// Päivän tulostus
void draw_Day(int days, int x, int y) {
	Display.txt_Height(2);
	Display.txt_Width(2);
	Display.txt_FGcolour(colourvalue);
	Display.gfx_MoveTo(x, y);

	if (days == 0)
		paiva = "    Maanantai   ";
	if (days == 1)
		paiva = "     Tiistai    ";
	if (days == 2)
		paiva = "   Keskiviikko  ";
	if (days == 3)
		paiva = "     Torstai    ";
	if (days == 4)
		paiva = "    Perjantai   ";
	if (days == 5)
		paiva = "    Lauantai    ";
	if (days == 6)
		paiva = "    Sunnuntai   ";

	sprintf(tempstring, paiva, colourvalue);
	Display.putstr(tempstring);
}

/// Valikon piirto
void draw_Menu() {
	colourvalue = 0xFFE0;

	/// Painikkeiden reunat
	for (int i = 0; i < 5; i++)
	{
		Display.gfx_Rectangle(buttonCoord[i][0], button_y1, buttonCoord[i][1], button_y2, colourvalue);
	}

	/// Fontin väri
	Display.txt_FGcolour(colourvalue);

	Display.txt_Width(1);
	Display.txt_Height(1);

	Display.gfx_MoveTo(16, 7);
	sprintf(tempstring, "MAIN", colourvalue);
	Display.putstr(tempstring);
	Display.gfx_MoveTo(76, 7);
	sprintf(tempstring, "ALARM", colourvalue);
	Display.putstr(tempstring);
	Display.gfx_MoveTo(144, 7);
	sprintf(tempstring, "TIME", colourvalue);
	Display.putstr(tempstring);
	Display.gfx_MoveTo(212, 7);
	sprintf(tempstring, "LED", colourvalue);
	Display.putstr(tempstring);
	Display.gfx_MoveTo(269, 7);
	sprintf(tempstring, "AUDIO", colourvalue);
	Display.putstr(tempstring);
}

/// Kellonajan piirto
void draw_Time(int hr, int mi, int se, int x, int y) {
	Display.txt_Height(3);
	Display.txt_Width(3);
	Display.txt_FGcolour(colourvalue);
	Display.gfx_MoveTo(x, y);
	sprintf(tempstring, "%002d:%002d:%002d", hr, mi, se, colourvalue);
	Display.putstr(tempstring);
}

/// Kellon "tickkien" piirtäminen
void draw_Ticks() {

	for (int i = 0; i <= 60; i++) {

		/// "Tickkien välit"
		int lengthTick = 10;
		int medTick = 30;
		int longTick = 50;
		int r = 70;

		int len = 2;

		if (i % 5 == 0) { len = 9; }
		if (i % 15 == 0) { len = 15; }

		double di = (double)i;

		float tick_x1 = (70)* cos((di * 6)*DegreesToRadians); //calculate the position of the X coordinate
		float tick_y1 = (70)* sin((di * 6)*DegreesToRadians); //calculate the position of the Y coordinate
		float tick_x2 = (70 - len) * cos((di * 6)*DegreesToRadians); //calculate the position of the X coordinate
		float tick_y2 = (70 - len) * sin((di * 6)*DegreesToRadians); //calculate the position of the Y coordinate

		Display.gfx_Line(cX + (int)tick_x1, cY + (int)tick_y1, (int)tick_x2 + cX, (int)tick_y2 + cY, colourvalue);
	}
}

///Analogisen kellon pohjan piirtäminen
void draw_AnalogBack() {

	colourvalue = 0xFFE0;
	Display.gfx_Circle(162, 160, 70, colourvalue);
	Display.gfx_Circle(162, 160, 71, colourvalue);
	Display.gfx_Circle(162, 160, 72, colourvalue);
	draw_Ticks();
}

/// Sekunttiviisarin piirtäminen
void drawSecondsHand(int seconds)
{

	int len = 2;
	seconds = seconds - 15;
	if (seconds % 5 == 0) { len = 9; }
	if (seconds % 15 == 0) { len = 15; }

	float SecondsX, SecondsY;

	// Vanhan viivan päälle mustaa
	Display.gfx_Line(cX, cY, preSecondsX + cX, preSecondsY + cY, BLACK); //erase the previous second hand

	SecondsX = (70 - len) * cos((seconds * 6)*DegreesToRadians); //calculate the position of the X coordinate
	SecondsY = (70 - len) * sin((seconds * 6)*DegreesToRadians); //calculate the position of the Y coordinate
	preSecondsX = (int)SecondsX; //save the previous coordinates
	preSecondsY = (int)SecondsY; //save the previous coordinates

								 // Uusi viiva
	Display.gfx_Line(cX, cY, (int)SecondsX + cX, (int)SecondsY + cY, colourvalue); //draw the new seconds hand

}

/// Minuuttiviisarien piirtäminen
void drawMinutesHand(int minutes)
{
	minutes = minutes - 15;

	float MinutesX, MinutesY;


	MinutesX = (50) * cos((minutes * 6)*DegreesToRadians); //calculate the position of the X coordinate
	MinutesY = (50) * sin((minutes * 6)*DegreesToRadians); //calculate the position of the Y coordinate

														   // Vanhan viivan päälle mustaa
	if ((int)MinutesX != preMinutesX || (int)MinutesY != preMinutesY) {
		Display.gfx_Line(cX, cY, preMinutesX + cX, preMinutesY + cY, BLACK); //erase the previous second hand
		Display.gfx_Line(cX + 1, cY + 1, preMinutesX + cX + 1, preMinutesY + cY + 1, BLACK); //erase the previous second hand
	}

	preMinutesX = (int)MinutesX; //save the previous coordinates
	preMinutesY = (int)MinutesY; //save the previous coordinates

	Display.gfx_Line(cX, cY, (int)MinutesX + cX, (int)MinutesY + cY, colourvalue); //draw the new seconds hand
	Display.gfx_Line(cX + 1, cY + 1, (int)MinutesX + cX + 1, (int)MinutesY + cY + 1, colourvalue); //draw the new seconds hand

}

void getTouch() {
	touch_X = Display.touch_Get(TOUCH_GETX);
	touch_Y = Display.touch_Get(TOUCH_GETY);

	for (int menuCounter = 0; menuCounter < 5; menuCounter++)
	{
		if (touch_X >= buttonCoord[menuCounter][0] && touch_X <= buttonCoord[menuCounter][1]
			&& touch_Y >= button_y1 - 1 && touch_Y <= button_y2 + 16) {
			menu_id = menuCounter + 1;
			redraw_menu = true;
		}
	}

	if (menu_id == 2 && cnt == 25) {
		if (touch_X >= 103 && touch_Y >= 186 && touch_X <= 217 && touch_Y <= 226) {
			alarm = !alarm;
			cnt = 0;
		}
	}

	if (touch_X >= 66 && touch_Y >= 120 && touch_X <= 126 && touch_Y <= 160 && alarm_hour_pressed == false) {
		old_touch_Y = touch_Y;
		alarm_hour_pressed = true;
	}
}

/// Tuntiviisarien piirtäminen
void drawHoursHand(float hours)
{
	if (hours > 12) {
		hours -= 12;
	}

	//float tempmin = minute/12;
	hours = ((hours / 12) * 60) + (float)minute / 12;

	hours = hours - 15;

	float HoursX, HoursY;

	HoursX = (35) * cos((hours * 6)*DegreesToRadians); //calculate the position of the X coordinate
	HoursY = (35) * sin((hours * 6)*DegreesToRadians); //calculate the position of the Y coordinate

													   // Vanhan viivan päälle mustaa
	if ((int)HoursX != preHoursX || (int)HoursY != preHoursY) {
		Display.gfx_Line(cX, cY, preHoursX + cX, preHoursY + cY, BLACK); //erase the previous second hand
		Display.gfx_Line(cX + 1, cY + 1, preHoursX + cX + 1, preHoursY + cY + 1, BLACK); //erase the previous second hand
	}

	preHoursX = (int)HoursX; //save the previous coordinates
	preHoursY = (int)HoursY; //save the previous coordinates

	Display.gfx_Line(cX, cY, (int)HoursX + cX, (int)HoursY + cY, colourvalue); //draw the new seconds hand
	Display.gfx_Line(cX + 1, cY + 1, (int)HoursX + cX + 1, (int)HoursY + cY + 1, colourvalue); //draw the new seconds hand

}

// SETUP
void setup() {
	///Ajastimen määritykset
	noInterrupts();           // disable all interrupts
	TCCR1A = 0;
	TCCR1B = 0;

	timer1_counter = 3036;
	TCNT1 = timer1_counter;   // preload timer
	TCCR1B |= (1 << CS12);    // 256 prescaler 
	TIMSK1 |= (1 << TOIE1);   // enable timer overflow interrupt
	interrupts();             // enable all interrupts

							  /// Näytön määritykset
	pinMode(4, OUTPUT);  // Set D4 on Arduino to Output (4D Arduino Adaptor V2 - Display Reset)
	digitalWrite(4, 1);  // Reset the Display via D4
	delay(100);
	digitalWrite(4, 0);  // unReset the Display via D4  

	delay(3500); //let the display start up

	DisplaySerial.begin(9600); // Using default 9600 baud rate
	Display.TimeLimit4D = 5000; // 5 second timeout on all commands  
	Display.gfx_BGcolour(BLACK); // Make it text on white background
	Display.txt_BGcolour(BLACK);
	Display.gfx_ScreenMode(4); // Landscape, microSD Card Facing Up  
	Display.gfx_Cls(); // Clear Screen

	Display.touch_Set(TOUCH_ENABLE);
	Display.touch_Set(TOUCH_REGIONDEFAULT);

	draw_Menu();
	draw_AnalogBack();
}

// AJASTIN
/// interrupt service routine 
ISR(TIMER1_OVF_vect)
{
	TCNT1 = timer1_counter;   // preload timer

	second++;

	//Sekunnit
	if (second == 60) {
		second = 0;
		minute++;

	}
	//Minuutit
	if (minute == 60) {
		minute = 0;
		hour++;

	}
	//Tunnit
	if (hour == 24) {
		hour = 0;
		minute = 0;
		second = 0;
		day++;

	}
	//Päivät
	if (day == 7) {
		day = 0;
	}



	// Draw trueksi
	draw = true;
	canpress++;
	if (canpress > 2) { canpress = 2; }
}

/// *********************** ///
//		  PÄÄLOOPPI         //
/// ********************** ///
void loop() {

	/// Jos sekunnit menevät yli 604799 (=Yksi viikko) niin nollataan ne

	/*
	Display.txt_Height(1);
	Display.txt_Width(1);
	Display.gfx_MoveTo(1, 75);
	sprintf(tempstring, "id: %d\ncur: %d", menu_id, currentMenu, 0xFFFF);
	Display.putstr(tempstring);
	*/

	if (alarm_hour_pressed) {
		alarm_hour = alarm_hour + ((old_touch_Y - touch_Y) / 5);
		if (alarm_hour > 23) {
		alarm_hour = 0;
		}
		if (alarm_hour < 0) {
		alarm_hour = 23;
		}
	}

	if (redraw_menu == true && menu_id != currentMenu) {
		Display.gfx_RectangleFilled(0, 25, 320, 240, 0x0000);
		currentMenu = menu_id;
		redraw_menu = false;
		switch (menu_id) {
		case 1:
			draw_AnalogBack();
			break;
		case 2:
			break;
		case 3:
			//draw_Time(hour, minute, second, 66, 125);
			//draw_Day(day, 31, 102);
			break;
		case 4:
			break;
		case 5:
			break;
		default:
			break;
		}
	}

	if (draw == true) {
		switch (menu_id) {
		case 1: /// Päävalikko
				//Päänäkymän kellonaika
			draw_Time(hour, minute, second, 66, 50);
			draw_Day(day, 31, 27);
			//Päänäkymän viisarit
			drawSecondsHand(second);
			drawMinutesHand(minute);
			drawHoursHand(hour);
			break;
		case 2: /// Alarm
				//Hälytyksen aika
			Display.txt_Height(2);
			Display.txt_Width(2);
			Display.txt_FGcolour(colourvalue);
			Display.gfx_MoveTo(31, 97);
			sprintf(tempstring, "      Alarm     ", colourvalue);
			Display.putstr(tempstring);
			draw_Time(alarm_hour, alarm_minute, 0, 66, 120);
			//Hältytysnappi
			Display.txt_Height(3);
			Display.txt_Width(3);
			if (alarm == true) {
				Display.txt_BGcolour(colourvalue);
				Display.txt_FGcolour(0x0000);
				Display.gfx_MoveTo(115, 193);
				sprintf(tempstring, " ON ", colourvalue);
				Display.putstr(tempstring);
			}
			if (alarm == false) {
				Display.txt_BGcolour(0x0000);
				Display.txt_FGcolour(colourvalue);
				Display.gfx_MoveTo(110, 193);
				sprintf(tempstring, " OFF ", colourvalue);
				Display.putstr(tempstring);
			}
			//Palautetaan tekstin taustaväri
			Display.txt_BGcolour(0x0000);
			//Kellonaika
			draw_Time(hour, minute, second, 66, 50);
			draw_Day(day, 31, 27);
			break;
		case 3: /// Time
			break;
		case 4: /// Led
			break;
		case 5: /// Audio
			break;
		default: break;
		}
		draw = false;

	}

	if (Display.touch_Get(TOUCH_STATUS) != NOTOUCH) {
		getTouch();
	}
	else if (Display.touch_Get(TOUCH_STATUS) == NOTOUCH && alarm_hour_pressed) {
		alarm_hour_pressed = false;
	}

	cnt = cnt + 1;
	if (cnt > 25) {
		cnt = 25;
	}

	//Kutsutaan päivän ja kelloajan tulostusfunktioita

}
